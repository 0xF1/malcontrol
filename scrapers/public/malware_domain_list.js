var scraper = require('./../scraper');
var _savemalware = require('../../commons/save_malw');
var _base_searching_url = "http://www.malwaredomainlist.com/mdl.php?inactive=&sort=Date&search=&colsearch=All&ascordesc=DESC&quantity=100&page=";

var _local_cache = {};

//URLQUERY
exports.goScraper = function(){

  _savemalware.firstTimeRunningMalware("malwaredomainlist.com",function(firstime){

    var uris = [];
    if (firstime){
      for(var i=1; i<500; i++){
        uris[i-1] = _base_searching_url + i;
      }
      console.log("[+] First time you are scraping malwaredomainlist.com");
      console.log("[+] Building DB =========================================");
      console.log("[+] Will query: " + uris.length *50 + " This will get a lot of resources and time !");
      console.log("[+] Building DB =========================================");
    } else {
      console.log("[+] Not the first time you are scrapingmalwaredomainlist.com");
      uris[0] = _base_searching_url + "1";
    }
    try{
      return scraper(uris, function(err, jQuery) {
        if (err) {return console.log("[-] Error happening in malwaredomainlist: " + err);}
        console.log("[+] Querying malwaredomainlist");

        var r = 0;
        return jQuery('tr').each(function() {
          // I decided to work with tr rather then tables for this url. Every table has the same style and name.
          // SUPER SITE SPECIFIC !!!!!!
          // The Number 4 is because right now the forst 4 raws are intestation !
          r++;
          if ( r <= 4)
           return true;  // continue;
          // SUPER SITE SPECIFIC !!

          var content = jQuery(this);
          if (undefined !== content && null !== content){

            var ts = content.find("td").eq(0).text();
            var timestamp = null;
            var r = /(\d{4}\/\d{1,2}\/\d{1,2}).*(\d{1,2}:\d{1,2})/.exec(ts);
            if (r !== null) {
              try {
                timestamp = new Date(r[1] + ' ' + r[2] + ' UTC').toISOString();
              } catch (e) {}
            }
            if (timestamp === null) {
              console.error("[+] <malwaredomainlist.com> Can't parse timestamp: " + ts)
              timestamp = ts;
            }
            console.log("[+] <malwaredomainlist.com> Time Stamp found: " + timestamp);

            var md5 = null;

            var compositscore = "100/100";
            console.log("[+] <malwaredomainlist.com> Composit Score found: " + compositscore);

            var name = content.find("td").eq(1).text();
            console.log("[+] <malwaredomainlist.com> Name found: " + name);

            var dsc = content.find("td").eq(4).text();
            console.log("[+] <malwaredomainlist.com> Desc found: " + dsc);

            var ip = content.find("td").eq(2).text();
            console.log("[+] <malwaredomainlist.com> IP found: " + ip);

            return _savemalware.saveMalwareToDB(null, timestamp, ip, compositscore, "malwaredomainlist.com", dsc, md5, name); 
          }//not nulls
        });//foreach element in the table of the scraped source
      },{'reqPerSec': 0.2});//scraper
    } catch(ex){return console.log("[-] Error in scraping malwaredomainlist.com " + ex);}
  });//firsttime
};//goScraper

